# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/observation/03_gamepad.ipynb.

# %% auto 0
__all__ = ['normalize_stick_event', 'normalize_trigger_event', 'process_stick_event', 'process_trigger_event',
           'process_button_event', 'record_gamepad_events']

# %% ../../nbs/observation/03_gamepad.ipynb 1
import time
import inputs

from ..utility.types import *


# %% ../../nbs/observation/03_gamepad.ipynb 2
def normalize_stick_event(event):
    # Normalize stick events to the range [-1, 1]
    value = event.state / 32767
    return value

def normalize_trigger_event(event):
    # Normalize trigger events to the range [0, 1]
    value = event.state / 255
    return value

# %% ../../nbs/observation/03_gamepad.ipynb 4
def process_stick_event(event, last_values, event_list, THRESHOLD, verbose):
    value = normalize_stick_event(event)
    # Check if the input has been recorded before
    if event.code in last_values:
        # If the input has been recorded before, check if the value has changed sufficiently
        if abs(value - last_values[event.code]) > THRESHOLD:
            # If the value has changed sufficiently, record the event
            event_list.append(GamepadEventObservation(timestamp=time.time(), code=event.code, state=value))
            last_values[event.code] = value
            if verbose:
                print(f'event.code{event.code}, event.state {value}')
    else:
        # If the input has not been recorded before, record the event
        event_list.append(GamepadEventObservation(timestamp=time.time(), code=event.code, state=value))
        last_values[event.code] = value
        if verbose:
            print(f'event.code{event.code}, event.state {value}')
    return last_values, event_list

# %% ../../nbs/observation/03_gamepad.ipynb 6
def process_trigger_event(event, last_values, event_list, THRESHOLD, verbose):
    value = normalize_trigger_event(event)
    # Check if the input has been recorded before
    if event.code in last_values:
        # If the input has been recorded before, check if the value has changed sufficiently
        if abs(value - last_values[event.code]) > THRESHOLD:
            # If the value has changed sufficiently, record the event
            event_list.append(GamepadEventObservation(timestamp=time.time(), code=event.code, state=value))
            last_values[event.code] = value
            if verbose:
                print(f'event.code{event.code}, event.state {value}')
    else:
        # If the input has not been recorded before, record the event
        event_list.append(GamepadEventObservation(timestamp=time.time(), code=event.code, state=value))
        last_values[event.code] = value
        if verbose:
            print(f'event.code{event.code}, event.state {value}')
    return last_values, event_list


# %% ../../nbs/observation/03_gamepad.ipynb 8
def process_button_event(event, event_list, verbose):
    # Record button press events regardless of the change in value
    event_list.append(GamepadEventObservation(timestamp=time.time(), code=event.code, state=event.state))
    if verbose:
        print(f'event.code{event.code}, event.state {event.state}')
    return event_list

# %% ../../nbs/observation/03_gamepad.ipynb 10
def record_gamepad_events(duration, THRESHOLD = .05, verbose=False):
    # Set up storage for the controller inputs
    event_list = []
    last_values = {}
    if verbose:
        print(f'record gamepad start:{time.time()}')
    end_time = time.time() + duration
    while time.time() < end_time:
        # Get the current controller inputs
        events = inputs.get_gamepad()
        
        if time.time() > end_time:#handles an issue where the while loop wont escape when waiting for inputs.get_gamepad()
            break
        for event in events:
            #if stick
            if event.code.startswith('ABS_Y') or event.code.startswith('ABS_X') or event.code.startswith('ABS_RY') or event.code.startswith('ABS_RX'):
                last_values, event_list = process_stick_event(event, last_values, event_list, THRESHOLD, verbose)
            #if trigger    
            elif event.code.startswith('ABS_Z') or event.code.startswith('ABS_RZ'):
                last_values, event_list = process_trigger_event(event, last_values, event_list, THRESHOLD, verbose)
            #if button    
            elif event.code.startswith('BTN_'):
                event_list = process_button_event(event, event_list, verbose)
        
    return event_list

